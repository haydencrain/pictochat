import process from 'process';
import path from 'path';
import express from 'express';
import cookieParser from 'cookie-parser';
import logger from 'morgan';
import helmet from 'helmet';
import { Sequelize } from 'sequelize';
import { apiRouter } from './routes/api-route';
import { makeFrontEndRouter } from './routes/front-end-route';
import { makeCORSMiddleware } from './middleware/cors-middleware';
import { SequelizeConnection } from './utils/sequelize-connection';
import { loadTestData } from './utils/load-test-data';
import { createAdminUser } from './utils/create-admin-user';
import { initialisePassport } from './middleware/passport-middleware';
import { NotFoundError } from './exceptions/not-found-error';
import { handleErrorMiddleware } from './middleware/handle-error-middleware';
import config from './utils/config';

// CONSTANTS
const PORT = config.PORT;
const WEB_CONTENT_DIR = config.WEB_CONTENT_DIR;
const FRONTEND_REQUEST_ORIGIN = config.FRONTEND_REQUEST_ORIGIN;
const API_PATH = '/api';

// Database Connection

const sequelize: Sequelize = SequelizeConnection.getInstance();
const dbAuthPromise = sequelize.authenticate();

dbAuthPromise.catch(error => {
  console.log('An error occured attempting to connect to the pictochat database', error);
});

dbAuthPromise.then(async () => {
  console.log('Sucessfully connected to pictochat database');
  // FIXME: Move test data loading into testing framework
  // (cleaner to always assume NODE_ENV = production when app.ts is run)
  if (process.env.NODE_ENV !== 'production') {
    await loadTestData();
  }

  // FIXME: Creating admin users may be better performed in a seperate web
  // management web service that connects to the same database as this one
  // (rather than creating an default admin user on start up as we're doing below)
  if (config.CREATE_ADMIN_USER) {
    await createAdminUser();
  }
});

//// APP ////
const app = express();

/// MIDDLEWARE ///
app.use(helmet());
app.use(makeCORSMiddleware(FRONTEND_REQUEST_ORIGIN));
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(initialisePassport());

/// ROUTES ///

// Frontend
const frontEndRouter = makeFrontEndRouter(WEB_CONTENT_DIR);
app.use('/', frontEndRouter);

// API
app.use(API_PATH, apiRouter);

app.use((req, res, next) => {
  // Prevents redirects to front-end when clients attempt to request non-existant API URLs
  if (!req.baseUrl.startsWith(`${API_PATH}/`)) {
    res.sendFile(path.join(WEB_CONTENT_DIR, '/index.html'));
  }
});

// The idea for generating custom 404 errors like this is inspired by code automatically
// generated by the express generator package.
// Source: ExpressJS 2017, Express application generator, viewed 15 Oct 2019, <https://expressjs.com/en/starter/generator.html>.

// Generates a 404 error if handlers are found for the request's URL
app.use((req, res, next) => {
  next(new NotFoundError());
});

/// ERROR HANDLERS ///

app.use(handleErrorMiddleware);

app.listen(PORT, () => console.log(`Pictochat server is listening on ${PORT}`));
